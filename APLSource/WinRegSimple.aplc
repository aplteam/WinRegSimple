:Class WinRegSimple
⍝ Offers the methods `Read`, `Write`, `Exist` and `Delete` for dealing with the Windows Registry.\\
⍝ It does not support any other methods, and it probably never will.
⍝ It also supports only a limited number of data types: `REG_SZ` and `REG_DWORD`.\\
⍝ For a more powerful class for dealing with the Windows Registry see the `WinReg` class
⍝ (<https://github.com/aplteam/WinReg>).\\
⍝ Homepage: <https://github.com/aplteam/WinRegSimple>

    ⎕ML←1 ⋄    ⎕IO←1
    :Include APLTreeUtils

    ∇ R←Version
      :Access Public Shared
      R←(Last⍕⎕THIS)'1.2.1.9' '2019-12-01'
    ∇

    ∇ History
      :Access Public Shared
      ⍝ * 1.2.1
      ⍝   * Bug fix: `Exist` failed because under some circumstances Windows does not provide an 
      ⍝     error code but an error message.
      ⍝\\
      ⍝ For information regarding older versions see <https://github.com/aplteam/WinRegSimple/releases>
     
    ∇

    ∇ r←{default}Read key;dmx;wsh
    ⍝ Read a value from the Windows Registry.\\
    ⍝ In case `key` does not exist but `default` was specified `r` becomes `default`.
    ⍝ Otherwise an error 11 is thrown.\\
    ⍝ Note that you can read the default value; for that `key` has to have a trailing backslash.\\
      :Access Public Shared
      'wsh'⎕WC'OLEClient' 'WScript.Shell'
      :Trap 11
          r←wsh.RegRead⊂key
      :Else
          dmx←⎕DMX
          :If 0<⎕NC'default'
              :If ∨/'DISP_E_EXCEPTION (80070002)'⍷dmx.Message
              :OrIf ∨/'DISP_E_EXCEPTION (80070003)'⍷dmx.Message
                  r←default
              :Else
                  dmx.Message ⎕SIGNAL 11
              :EndIf
          :Else
              dmx.Message ⎕SIGNAL 11
          :EndIf
      :EndTrap
    ∇

    ∇ {r}←Write(key data);wsh;type;isNumeric
    ⍝ Write a value to the Windows Registry. If the value does not yet exist it will be created.\\
    ⍝ Note that you can write the default value; for that `key` has to have a trailing backslash.\\
    ⍝ If `data` is a text vector it will be written as REG_SZ. If it is an integer it will be written
    ⍝ as REG_DWORD. Note that if it is an integer then it must be a one-item vector or a scalar.
      :Access Public Shared
      'Invalid data (depth)'⎕SIGNAL 11/⍨~(≡data)∊0 1
      'Invalid data (rank)'⎕SIGNAL 11/⍨~(⍴⍴data)∊0 1
      :If isNumeric←⊃0=1↑0⍴data
      :AndIf data≠⌊data
          'Invalid data (rank)'⎕SIGNAL 11/⍨1≠⍴⍴data
      :EndIf
      type←(1+isNumeric)⊃'REG_SZ' 'REG_DWORD'
      r←0
      'wsh'⎕WC'OLEClient' 'WScript.Shell'
      wsh.RegWrite key(⊃⍣isNumeric⊣data)type
    ∇

    ∇ {r}←Delete key;dmx;wsh
    ⍝ Delete a key. Not that a key can only be deleted when there are no sub keys.
    ⍝ In case of success a 1 is returned. In case `key` does not exist or is not empty a 0 is returned.
    ⍝ If the function fails for other reasons then an error is signalled.
      :Access Public Shared
      r←1
      :If 0<≢key
          'wsh'⎕WC'OLEClient' 'WScript.Shell'
          :Trap 11
              wsh.RegDelete⊂key
          :Else
              dmx←⎕DMX
              :If ∨/'Invalid root in registry key'⍷dmx.Message
                  r←0
              :ElseIf ∨/'Unable to remove registry key'⍷dmx.Message
                  r←0
              :Else
                  dmx.Message ⎕SIGNAL dmx.EN
              :EndIf
          :EndTrap
      :EndIf
    ∇

    ∇ bool←Exists key;dmx;wsh
    ⍝ Checks whether `key` does exist and returns 1 if so, otherwise 0.
      :Access Public Shared
      bool←0
      :If 0<≢key
          'wsh'⎕WC'OLEClient' 'WScript.Shell'
          :Trap 11
              {}wsh.RegRead⊂key
              bool←1
          :Else
              dmx←⎕DMX
              :If 0=+/'DISP_E_EXCEPTION (80070002)'⍷dmx.Message
              :AndIf 0=+/'DISP_E_EXCEPTION (80070003)'⍷dmx.Message
              :AndIf 0=+/'Invalid root in registry key'⍷dmx.Message
                  bool←1
              :EndIf
          :EndTrap
      :EndIf
    ∇

:EndClass
